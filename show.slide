Understanding net/http: building a new router for GOV.UK
19:00 10 Jul 2013

Nick Stenning
Government Digital Service
https://whiteink.com/
@nickstenning

* GOV.UK

Hello, I'm from the government.

.image img/govuk.png 513 888

* GOV.UK

.image img/bankholidays.png 513 888

* GOV.UK

.image img/insidegov.png 513 888

* GOV.UK (behind the scenes)

.image img/behindthescenes.png

* Internal APIs, small pieces

Behind the scenes we have:

- 34 Rack apps (mostly Rails, some Sinatra)
- Flask
- Django
- Scala/Play
- Loads of nginx
- Varnish

HTTP *everywhere*.

* Routing

Existing solution leaves something to be desired... _ahem..._

    sub vcl_recv {
      # Routing
      if (req.url ~ "^/autocomplete(\?.*)?$|^/preload-autocomplete(\?.*)?$|^/sitemap[^/]*.xml(\?.*)?$") {
        <%= set_backend('search') %>
      } else if (req.url ~ "^/when-do-the-clocks-change([/?.].*)?$|^/bank-holidays([/?.].*)?$|^/gwyliau-banc([/?.].*)?$") {
        <%= set_backend('calendars') %>
      } else if (req.url ~ "^/(<%= @smartanswers.join("|") %>)([/?.].*)?$") {
        <%= set_backend('smartanswers') %>
      } else if (req.url ~ "^/stylesheets|^/javascripts|^/images|^/templates|^/favicon\.ico(\?.*)?$|^/humans\.txt(\?.*)?$|^/robots\.txt(\?.*)?$|^/fonts|^/google[a-f0-9]{16}\.html(\?.*)?$|^/apple-touch(.*)?\.png$") {
        <%= set_backend('static') %>
      } else if (req.url ~ "^/service-manual([/?.].*)?$|^/designprinciples([/?.].*)?$") {
        <%= set_backend('designprinciples') %>
    ...
      } else if (req.url ~ "^/__canary__$") {
        <%= set_backend('canary_frontend') %>
      <%# This matches on any subpath of the slugs, the bare slugs should fall through to content in Frontend %>
      } else if (req.url ~ "^/pay-foreign-marriage-certificates/(.+)$|^/deposit-foreign-marriage/(.+)$|^/pay-register-death-abroad/(.+)$|^/pay-register-birth-abroad/(.+)$|^/pay-legalisation-post/(.+)$|^/pay-legalisation-drop-off/(.+)$") {
        <%= set_backend('transaction_wrappers') %>
      } else {
        <%= set_backend('frontend') %>
      }
    }

* Hello, go

.play support/hello.go

* Hello, HTTP

.play support/hellohttp.go

* HandlerFunc and DefaultServeMux

.code support/defs.go /func HandleFunc/,/^}/
.code support/defs.go /serveMux HandleFunc OMIT/,/^}/
.code support/defs.go /type HandlerFunc/,/^}/
.code support/defs.go /serverHandler OMIT/,/^}/

* What's a ServeMux?

.play support/servemuxexample.go /START OMIT/,

* What's a ServeMux? (explicit)

.play support/servemuxexplicit.go /START OMIT/,
.code support/defs.go /ListenAndServe/,/^}/

* What's a ServeMux?

`http.ListenAndServe` takes a `Handler`.

.code support/servemux.go /ListenAndServe/,/^}/

`ServeMux` is a type that satisfies the `Handler` interface.

.code support/servemux.go /ServeHTTP/,/^}/

`ServeMux.Handle()` registers other handlers at paths.

.code support/servemux.go /Handle\(/,/^}/

It's a request router.

* Handler

Everything is a Handler. But what's one of those?

.code support/defs.go /type Handler/,/^}/

Well, anything. Anything that has an appropriate `ServeHTTP` method.

* Turtles all the way down

.image img/turtles.jpg

* Interfaces all the way down

Interfaces, interfaces everywhere!

.code support/defs.go /ListenAndServe/,/^}/
.code support/defs.go /type Handler/,/^}/
.code support/defs.go /type ResponseWriter/,/^}/
.code support/defs.go /type Writer/,/^}/

* The start of a better router

The mapping between URLs and backend services can be modelled as a prefix tree
(or *trie*)

.image img/prefixtrie.png 346 900

* The start of a better router

.code support/trie.go

.link https://github.com/nickstenning/trie

* The routing table is data

Treat routing information as *data*, which can be updated on the fly by
applications as they deploy. They can register themselves:

    {
      "id": "whitehall",
      "url": "http://whitehall.internal"
    }

And their routes:

    {
      "type": "exact",
      "path": "/airport-rights",
      "application_id": "frontend"
    }
    {
      "type": "prefix",
      "path": "/government",
      "application_id": "whitehall"
    }

* Combining ServeMux and Trie...

    package triemux

.code support/triemux.go /Handle/,/^}/
.code support/triemux.go /ServeHTTP/,/^}/
.link https://github.com/nickstenning/router/tree/master/triemux github.com/nickstenning/router/triemux

* A simple TrieMux example

.play support/triemuxexample.go /NewMux/,/ListenAndServe/

* Finally, combining TrieMux and a Database

.code support/router.go /type Router/,/^}/
.code support/router.go /ServeHTTP/,/^}/

* Atomic reloading

.code support/router.go /ReloadRoutes/,/^}/

* Is it any good?

Small request bodies (lower bound):

.code support/smallrequests.bench

Large request bodies (lower bound):

.code support/largerequests.bench

* The unreasonable effectiveness of Go

This was about three days' work, with no attempt at optimization. Contributing
factors in Go's effectiveness:

- Dealing with error conditions up front
- The `defer`, `recover()` pattern
- Interfaces (is a bare pointer _really_ the right answer?)
- Composition of simple components (`Trie`, `TrieMux`, `Router`)
- Rich standard library

* If you only remember two things

- Interfaces, interfaces, interfaces
- Do the hard work to make it simple
.link https://www.gov.uk/designprinciples#fourth
